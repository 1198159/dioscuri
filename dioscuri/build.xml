<?xml version="1.0" ?>

<!--
/*
 * $Revision$ $Date$ $Author$
 *
 * Copyright (C) 2007-2009  National Library of the Netherlands, 
 *                          Nationaal Archief of the Netherlands, 
 *                          Planets
 *                          KEEP
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
 * MA  02110-1301, USA.
 *
 * For more information about this project, visit
 * http://dioscuri.sourceforge.net/
 * or contact us via email:
 *   jrvanderhoeven at users.sourceforge.net
 *   blohman at users.sourceforge.net
 *   bkiers at users.sourceforge.net
 * 
 * Developed by:
 *   Nationaal Archief               <www.nationaalarchief.nl>
 *   Koninklijke Bibliotheek         <www.kb.nl>
 *   Tessella Support Services plc   <www.tessella.com>
 *   Planets                         <www.planets-project.eu>
 *   KEEP                            <www.keep-project.eu>
 * 
 * Project Title: DIOSCURI
 */
-->

<!--
 Automated tasks for the Dioscuri project
-->

<project name="Dioscuri" basedir="." default="run">

    <description>
        Build file for Dioscuri, the modular emulator
    </description>

	<property name="version"            value="0.5.0"/>
	<property name="main-class"         value="dioscuri.DioscuriFrame"/>

	<!-- Directories in this tree -->
    <property name="src.dir"            value="${basedir}/src"/>
	<property name="main-src.dir"       value="${src.dir}/main"/>
	<property name="test-src.dir"       value="${src.dir}/test"/>
	<property name="gen-src.dir"        value="${src.dir}/generated"/>
	<property name="libs.dir"           value="${basedir}/libs"/>
    <property name="config.dir"         value="${basedir}/config"/>
    <property name="log.dir"            value="${basedir}/log"/>
    <property name="images.dir"         value="${basedir}/images"/>
    <property name="build.dir"          value="${basedir}/build"/>
    <property name="classes.dir"        value="${build.dir}/classes/main"/>
    <property name="jar.dir"            value="."/>
    <property name="javadoc.dir"        value="${build.dir}/javadoc"/>

    <!-- Classpath -->
    <path id="master-classpath">
        <fileset dir="${libs.dir}">
            <include name="*.jar"/>
        </fileset>
	    <pathelement location="."/>
    </path>

    <!-- JAXB compiler task definition -->
    <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask" classpathref="master-classpath"/>

    <!-- Delete output files and directories -->
    <target name="clean" description="Clean the build tree">
    	<delete includeemptydirs="true">
    		<fileset dir="${gen-src.dir}" includes="**/*"/>
    	</delete>	 
        <delete dir="${build.dir}" quiet="true"/>
		<delete>
		    <fileset dir="${log.dir}" includes="**/emulator*.txt" excludes="**/emulator0.txt"/>
	  	</delete>
        <mkdir dir="${javadoc.dir}"/>
    </target>

    <!-- Generate Java classes from XML using JAXB -->
    <target name="generated.src" description="Build the config JAXB classes from DioscuriConfig.xsd">
		<mkdir dir="${gen-src.dir}"/>
    	<xjc schema="${config.dir}/DioscuriConfig.xsd" destdir="${gen-src.dir}" package="dioscuri.config">
    	    <produces dir="${gen-src.dir}" includes="**/*.java" />
    	</xjc>
    </target>

    <!-- Compile the source directory tree -->
    <target name="compile" depends="generated.src" description="Compiles the source directory tree">
		<mkdir dir="${classes.dir}"/>
		<javac srcdir="${gen-src.dir}" destdir="${classes.dir}" classpathref="master-classpath" fork="yes"/>
		<javac srcdir="." destdir="${classes.dir}" classpathref="master-classpath" fork="yes"/>
    </target>

    <!-- Create the javadoc files -->
    <target name="javadoc" description="Create the javadoc files" depends="generated.src">
		<mkdir dir="${javadoc.dir}"/>
        <javadoc packagenames="dioscuri.*" sourcepath="${main-src.dir}" destdir="${javadoc.dir}" author="true" version="true" use="true"  classpathref="master-classpath">
            <classpath>
                <dirset dir="."/>
                <path refid="master-classpath"/>
            </classpath>
        </javadoc>
    </target>

    <!-- Create a runnable jar file -->
    <target name="jar" description="Create the Dioscuri jar file" depends="clean, compile">
		<!--  <mkdir dir="${jar.dir}"/> -->
		<tstamp/>
        <jar destfile="${ant.project.name}-${version}.jar" whenmanifestonly="fail">
        	<!--  <fileset dir="${basedir}/" includes="config/**" /> -->
        	<fileset dir="${classes.dir}/" />
			<manifest>
				<attribute name="Built-By" value="KEEP project"/>
				<attribute name="Built-On" value="${TODAY}"/>
				<attribute name="Main-Class" value="${main-class}"/>
				<attribute name="Class-Path" value="libs/jaxb-api.jar libs/jaxb-impl.jar libs/commons-cli-1.2.jar"/>
			</manifest>
        </jar>
    </target>

    <!-- Create a complete release (zip/gzip file, including jar, libs, docs, logs, config and images) -->
    <target name="release" description="Create a complete release" depends="jar"> <!-- include javadoc -->
		<zip destfile="${build.dir}/${ant.project.name}-${version}.zip">
			<fileset dir="${jar.dir}" includes="*.jar"/>
			<zipfileset dir="${config.dir}" prefix="config" includes="**/DioscuriConfig.xsd, **/DioscuriConfig.xml, **/logging.properties, **/*.gif"/>
			<zipfileset dir="${libs.dir}" prefix="libs" includes="**/activation.jar,**/jaxb-api.jar,**/jaxb-impl.jar,**/jsr173_1.0_api.jar,**/commons-cli-1.2.jar" />
			<zipfileset dir="${images.dir}" excludes="**/*.img" prefix="images"/>
			<zipfileset dir="${log.dir}" includes="emulator0.txt" prefix="log"/>
			<fileset dir="${basedir}" includes="*.txt"/>
			<fileset dir="${basedir}" includes="dioscuri.bat"/>
			<zipfileset dir="${javadoc.dir}" prefix="api"/>
		</zip>
    	<tar destfile="${build.dir}/${ant.project.name}-${version}.tar.gz" compression="gzip">
			<fileset dir="${jar.dir}" includes="*.jar"/>
			<tarfileset dir="${config.dir}" prefix="config" includes="**/DioscuriConfig.xsd, **/DioscuriConfig.xml, **/logging.properties, **/*.gif"/>
			<tarfileset dir="${libs.dir}" prefix="libs" includes="**/activation.jar,**/jaxb-api.jar,**/jaxb-impl.jar,**/jsr173_1.0_api.jar,**/commons-cli-1.2.jar" />
    		<tarfileset dir="${images.dir}" excludes="**/*.img" prefix="images"/>
			<tarfileset dir="${log.dir}" includes="emulator0.txt" prefix="log"/>
			<fileset dir="${basedir}" includes="*.txt"/>
			<fileset dir="${basedir}" includes="dioscuri.bat"/>
			<tarfileset dir="${javadoc.dir}" prefix="api"/>
		</tar>
	</target>

    <!-- Execute the jar file -->
    <target name="run" depends="jar" description="Execute the current JAR file">
        <java jar="${ant.project.name}-${version}.jar" fork="true"/>
    </target>

</project>